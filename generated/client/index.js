
Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  NotFoundError,
  decompressFromBase64,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions
} = require('./runtime/index')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.6.1
 * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
 */
Prisma.prismaVersion = {
  client: "4.6.1",
  engine: "694eea289a8462c80264df36757e4fdc129b1b32"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.NotFoundError = NotFoundError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}


  const path = require('path')

const { findSync } = require('./runtime')
const fs = require('fs')

// some frameworks or bundlers replace or totally remove __dirname
const hasDirname = typeof __dirname !== 'undefined' && __dirname !== '/'

// will work in most cases, ie. if the client has not been bundled
const regularDirname = hasDirname && fs.existsSync(path.join(__dirname, 'schema.prisma')) && __dirname

// if the client has been bundled, we need to look for the folders
const foundDirname = !regularDirname && findSync(process.cwd(), [
    "generated/client",
    "client",
], ['d'], ['d'], 1)[0]

const dirname = regularDirname || foundDirname || __dirname

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  deadline: 'deadline',
  userId: 'userId'
});

exports.Prisma.PostScalarFieldEnum = makeEnum({
  slug: 'slug',
  title: 'title',
  markdown: 'markdown',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Post: 'Post',
  Order: 'Order'
});

const compressedDMMF = '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'
const decompressedDMMF = decompressFromBase64(compressedDMMF)
// We are parsing 2 times, as we want independent objects, because
// DMMFClass introduces circular references in the dmmf object
const dmmf = JSON.parse(decompressedDMMF)
exports.Prisma.dmmf = JSON.parse(decompressedDMMF)

/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/ticup/Documents/workspaceNode/ordle/ordle/generated/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [],
    "previewFeatures": [
      "deno"
    ],
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "../../.env",
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "4.6.1",
  "engineVersion": "694eea289a8462c80264df36757e4fdc129b1b32",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "cockroachdb",
  "dataProxy": true
}
config.document = dmmf
config.dirname = dirname

config.inlineSchema = 'Ly8gVGhpcyBpcyB5b3VyIFByaXNtYSBzY2hlbWEgZmlsZSwKLy8gbGVhcm4gbW9yZSBhYm91dCBpdCBpbiB0aGUgZG9jczogaHR0cHM6Ly9wcmlzLmx5L2QvcHJpc21hLXNjaGVtYQoKZ2VuZXJhdG9yIGNsaWVudCB7CiAgcHJvdmlkZXIgICAgICAgID0gInByaXNtYS1jbGllbnQtanMiCiAgcHJldmlld0ZlYXR1cmVzID0gWyJkZW5vIl0KICBvdXRwdXQgICAgICAgICAgPSAiLi4vZ2VuZXJhdGVkL2NsaWVudCIKfQoKZGF0YXNvdXJjZSBkYiB7CiAgcHJvdmlkZXIgPSAiY29ja3JvYWNoZGIiCiAgdXJsICAgICAgPSBlbnYoIkRBVEFCQVNFX1VSTCIpCn0KCm1vZGVsIFVzZXIgewogIGlkICAgICBTdHJpbmcgIEBpZCBAZGVmYXVsdChjdWlkKCkpCiAgZW1haWwgIFN0cmluZyAgQHVuaXF1ZQogIG5hbWUgICBTdHJpbmc/CiAgb3JkZXJzIE9yZGVyW10KfQoKbW9kZWwgUG9zdCB7CiAgc2x1ZyAgICAgU3RyaW5nIEBpZAogIHRpdGxlICAgIFN0cmluZwogIG1hcmtkb3duIFN0cmluZwoKICBjcmVhdGVkQXQgRGF0ZVRpbWUgQGRlZmF1bHQobm93KCkpCiAgdXBkYXRlZEF0IERhdGVUaW1lIEB1cGRhdGVkQXQKfQptb2RlbCBPcmRlciB7CiAgaWQgICAgICAgU3RyaW5nICAgQGlkIEBkZWZhdWx0KGN1aWQoKSkKICBuYW1lICAgICBTdHJpbmcKICBkZWFkbGluZSBEYXRlVGltZQoKICBVc2VyICAgVXNlcj8gICBAcmVsYXRpb24oZmllbGRzOiBbdXNlcklkXSwgcmVmZXJlbmNlczogW2lkXSkKICB1c2VySWQgU3RyaW5nPwp9CgoK'
config.inlineSchemaHash = '67da634a3cf77eab0d295a038eda1ed4f26b912eb44307063501c3271006def1'

config.inlineDatasources = {
  "db": {
    "url": {
      "fromEnvVar": "DATABASE_URL",
      "value": null
    }
  }
}


const { warnEnvConflicts } = require('./runtime/index')

warnEnvConflicts({
    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(dirname, config.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(dirname, config.relativeEnvPaths.schemaEnvPath)
})

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

